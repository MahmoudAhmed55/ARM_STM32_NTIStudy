/********************************************************/
/******** Author      : Martina Mofied Maurice *********/
/******** Date        : 07/11/2023            *********/
/******** version     : V1.0                 *********/
/******** Description : SYSTICK_PROGRAM     *********/
/***************************************************/

#include "../include/BIT_MATH.h"
#include "../include/STD_TYPES.h"
#include "../include/SYSTICK_Interface.h"
#include "../include/SYSTICK_Private.h"
#include "../include/SYSTICK_Config.h"
void (*callBack)(void);
u8 Global_u8IsPeriodic;

void MSYSTICK_voidInitialize (void)
{
	SYSTICK_CTRL_REG=0;
#if SYSTICK_CLKSOURCE == AHB
	SET_BIT(SYSTICK_CTRL_REG,SysTick_CLKSOURCE);
#elif SYSTICK_CLKSOURCE == AHB_DIVIDED_8
	CLR_BIT(SYSTICK_CTRL_REG,SysTick_CLKSOURCE);
#else

#endif
}


void MSYSTICK_voidSetBusyWait (u32 A_u32Ticks)
{
	u32 Local_u32Load=A_u32Ticks*1000;
	SYSTICK_LOAD_REG=Local_u32Load;
	SYSTICK_VAL_REG=0;

	SET_BIT(SYSTICK_CTRL_REG,SysTick_ENABLE);

	while(GET_BIT(SYSTICK_CTRL_REG,SysTick_COUNTFLAG)==0);

	CLR_BIT(SYSTICK_CTRL_REG,SysTick_ENABLE);
	SYSTICK_VAL_REG=0;
	SYSTICK_LOAD_REG=0;

}

void MSYSTICK_voidSetIntervalSingle (u32 A_u32Ticks, void(*ptr)(void) )
{
	if(ptr != NULL_PTR)
	{
		Global_u8IsPeriodic = 0;
		SYSTICK_VAL_REG=0;
		SYSTICK_LOAD_REG=A_u32Ticks*1000;
		callBack = ptr;
		SET_BIT(SYSTICK_CTRL_REG,SysTick_TICKINT);
		SET_BIT(SYSTICK_CTRL_REG,SysTick_ENABLE);
	}

}
void MSYSTICK_voidSetIntervalPeriodic (u32 A_u32Ticks, void(*ptr)(void))
{
	if(ptr != NULL_PTR)
	{
		SYSTICK_VAL_REG=0;
		SYSTICK_LOAD_REG=0;
		Global_u8IsPeriodic = 1;
		SYSTICK_LOAD_REG=A_u32Ticks*1000;
		callBack = ptr;
		SET_BIT(SYSTICK_CTRL_REG,SysTick_TICKINT);
		SET_BIT(SYSTICK_CTRL_REG,SysTick_ENABLE);
	}
}

void MSYSTICK_voidStartTimer (void)
{
	SET_BIT(SYSTICK_CTRL_REG,SysTick_ENABLE);
}
void MSYSTICK_voidStopTimer (void)
{
	CLR_BIT(SYSTICK_CTRL_REG,SysTick_ENABLE);
}

u32  MSYSTICK_u32GetElapsedTime (void)
{
	u32 Local_u32Value=0;
	Local_u32Value=SYSTICK_LOAD_REG-SYSTICK_VAL_REG;
	return Local_u32Value;

}
u32  MSYSTICK_u32GetRemainingTime (void)
{
	u32 Local_u32Value=0;
	Local_u32Value=SYSTICK_VAL_REG;
	return Local_u32Value;
}
void SysTick_Handler (void)
{

	if(Global_u8IsPeriodic == 0)
	{
		CLR_BIT(SYSTICK_CTRL_REG,SysTick_ENABLE);
		SYSTICK_VAL_REG=0;
		SYSTICK_LOAD_REG=0;
	}
	callBack();
	GET_BIT(SYSTICK_CTRL_REG,SysTick_COUNTFLAG);

}

