#define "STD_TYPES.h"
#define "BIT_MATH.h"

#define "RCC_Interface.h"
#define "RCC_Private.h"
#define "RCC_Config.h"

void RCC_InitClockSystem(void)
{
	RCC_CR=0X00000000;                     //clock_controlRegister_init.
	RCC_CFGR=0x00000000;                   //Clock_configurationRegister_init.

   #if RCC_CLOCK_TYPE==RCC_HSI
	SIT_BIT(RCC_CR,HSI_ON);                  //Enable HSI.
	SIT_BIT(RCC_CR,HSI_TRIM);                // TRIM FREQUANCY VALUE=16.
	while(READ_BIT(RCC_CR,HSI_RDY));         //BUSY_WAIT waiting for HSI ready flag.

   #elif  RCC_CLOCK_TYPE==RCC_HSE_CRYSTAL

	CLR_BIT(RCC_CR,HSE_BYP);                //Write 0 for ByPath CRYSTAL.
	SIT_BIT(RCC_CR,HSE_ON);                 //Enable HSE.
	while(READ_BIT(RCC_CR,HSE_RDY));        //BUSY_WAIT waiting for HSE ready flag.
	SIT_BIT(RCC_CFGR,SW);                   //HSE selected as system clock.

   #elif  RCC_CLOCK_TYPE==RCC_HSE_RC

	SET_BIT(RCC_CR,HSE_BYP);                //Write 0 for ByPath RC.
	SIT_BIT(RCC_CR,HSE_ON);                 //Enable HSE.
	while(READ_BIT(RCC_CR,HSE_RDY));        //BUSY_WAIT waiting for HSE ready flag.
	SIT_BIT(RCC_CFGR,SW);                   //HSE selected as system clock.

   #elif  RCC_CLOCK_TYPE==RCC_PLL


           #if    RCC_PLL_SOURCE==PLL_HSI_DIVIDEBY2
	               CLR_BIT(RCC_CFGR,PLL_SRC);                  //HSI/2_SOURCE ENABLE
           #elif  RCC_PLL_SOURCE==PLL_HSE_DIVIDEBY2
	               SIT_BIT(RCC_CFGR,PLL_SRC);                   //HSE_SOURCE ENABLE
	               CLR_BIT(RCC_CFGR,PLL_XTPRE);                 //HSE/2
           #elif  RCC_PLL_SOURCE==PLL_HSE
	               SIT_BIT(RCC_CFGR,PLL_SRC);           //HSE_SOURCE ENABLE
	               CLR_BIT(RCC_CFGR,PLL_XTPRE);         //HSE/2
	               SIT_BIT(RCC_CFGR,PLL_XTPRE);
          #endif
	                  SIT_BIT(RCC_CR,HSE_ON);


#endif

}
